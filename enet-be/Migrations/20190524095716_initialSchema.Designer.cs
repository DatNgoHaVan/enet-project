// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using enet_be.Models;

namespace enet_be.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20190524095716_initialSchema")]
    partial class initialSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("enet_be.Models.Appeal", b =>
                {
                    b.Property<long>("AppealId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<long>("ReportId");

                    b.Property<int?>("Status");

                    b.Property<long>("UserId");

                    b.HasKey("AppealId");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("Appeals");

                    b.HasData(
                        new
                        {
                            AppealId = 1L,
                            Date = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportId = 1L,
                            Status = 1,
                            UserId = 1L
                        },
                        new
                        {
                            AppealId = 2L,
                            Date = new DateTime(2019, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportId = 1L,
                            Status = 1,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("enet_be.Models.AvailableOptions", b =>
                {
                    b.Property<long>("AvailableOptionsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.HasKey("AvailableOptionsId");

                    b.ToTable("AvailableOptions");

                    b.HasData(
                        new
                        {
                            AvailableOptionsId = 1L,
                            Content = "Test1"
                        },
                        new
                        {
                            AvailableOptionsId = 2L,
                            Content = "Test2"
                        });
                });

            modelBuilder.Entity("enet_be.Models.Comment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Image");

                    b.Property<bool?>("IsExist");

                    b.Property<long>("PostId");

                    b.Property<long>("UserId");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            CommentId = 1L,
                            Content = "Thanks!",
                            Date = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExist = true,
                            PostId = 1L,
                            UserId = 1L
                        },
                        new
                        {
                            CommentId = 2L,
                            Content = "I love you!",
                            Date = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsExist = true,
                            PostId = 2L,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("enet_be.Models.Content", b =>
                {
                    b.Property<long>("ContentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentName");

                    b.Property<long>("UserId");

                    b.HasKey("ContentId");

                    b.HasIndex("UserId");

                    b.ToTable("Contents");

                    b.HasData(
                        new
                        {
                            ContentId = 1L,
                            ContentName = "Test1",
                            UserId = 1L
                        },
                        new
                        {
                            ContentId = 2L,
                            ContentName = "Test2",
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("enet_be.Models.Expect", b =>
                {
                    b.Property<long>("UserIdMain");

                    b.Property<long>("UserIdSub");

                    b.HasKey("UserIdMain", "UserIdSub");

                    b.HasIndex("UserIdSub");

                    b.ToTable("Expects");

                    b.HasData(
                        new
                        {
                            UserIdMain = 1L,
                            UserIdSub = 2L
                        });
                });

            modelBuilder.Entity("enet_be.Models.Log", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("LogId");

                    b.ToTable("Logs");

                    b.HasData(
                        new
                        {
                            LogId = 1L,
                            Content = "Test1",
                            ModifiedBy = "Lisa",
                            ModifiedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            LogId = 2L,
                            Content = "Test2",
                            ModifiedBy = "Anthorny",
                            ModifiedDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("enet_be.Models.Only", b =>
                {
                    b.Property<long>("UserIdMain");

                    b.Property<long>("UserIdSub");

                    b.HasKey("UserIdMain", "UserIdSub");

                    b.HasIndex("UserIdSub");

                    b.ToTable("Only");

                    b.HasData(
                        new
                        {
                            UserIdMain = 1L,
                            UserIdSub = 2L
                        });
                });

            modelBuilder.Entity("enet_be.Models.OptionPostUser", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("PostId");

                    b.HasKey("UserId", "PostId");

                    b.HasAlternateKey("PostId", "UserId");

                    b.ToTable("OptionPostUsers");
                });

            modelBuilder.Entity("enet_be.Models.Post", b =>
                {
                    b.Property<long>("PostId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AvailableOptionsId");

                    b.Property<string>("Content");

                    b.Property<bool>("IsExist");

                    b.Property<int?>("Status");

                    b.Property<string>("Type");

                    b.Property<string>("Url");

                    b.Property<long>("UserId");

                    b.HasKey("PostId");

                    b.HasIndex("AvailableOptionsId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            PostId = 1L,
                            AvailableOptionsId = 1L,
                            Content = "Good morning, guys!",
                            IsExist = true,
                            Status = 1,
                            Type = "Type1",
                            Url = "https://i.imgur.com/5NYlSWb.jpg",
                            UserId = 1L
                        },
                        new
                        {
                            PostId = 2L,
                            AvailableOptionsId = 1L,
                            Content = "Last night I dreamt of you my friend Of how you cried and said we intertwine",
                            IsExist = true,
                            Status = 1,
                            Type = "Type1",
                            Url = "https://i.imgur.com/5NYlSWb.jpg",
                            UserId = 1L
                        },
                        new
                        {
                            PostId = 3L,
                            AvailableOptionsId = 1L,
                            Content = "Last night I dreamt of you my friend Of how you cried and said we intertwine",
                            IsExist = true,
                            Status = 1,
                            Type = "Type1",
                            Url = "https://i.imgur.com/cEn7P4Q.jpg",
                            UserId = 1L
                        },
                        new
                        {
                            PostId = 4L,
                            AvailableOptionsId = 1L,
                            Content = "có chiếc xe cửa sổ trong veo đưa hồn ai bay đi qua vèo",
                            IsExist = true,
                            Status = 1,
                            Type = "Type1",
                            Url = "https://i.imgur.com/GvB85NNb.jpg",
                            UserId = 1L
                        },
                        new
                        {
                            PostId = 5L,
                            AvailableOptionsId = 1L,
                            Content = "Nắng vẫn rơi bên thềm, vương sỏi đá. Gió kéo mây đi rồi, bay về đâu ? ",
                            IsExist = true,
                            Status = 1,
                            Type = "Type1",
                            Url = "https://i.imgur.com/5NYlSWb.jpg",
                            UserId = 1L
                        },
                        new
                        {
                            PostId = 6L,
                            AvailableOptionsId = 1L,
                            Content = "Bắt xe tuyến vùng cao Đà Lạt Tách cà phê hương thơm ngào ngạt ",
                            IsExist = true,
                            Status = 1,
                            Type = "Type1",
                            Url = "https://i.imgur.com/5NYlSWb.jpg",
                            UserId = 1L
                        },
                        new
                        {
                            PostId = 7L,
                            AvailableOptionsId = 1L,
                            Content = "Bắt chuyến xe đò, tuyến vùng cao, ghé thành phố không đèn đỏ. Ngồi đón bình minh, nắng vàng son..lên thềm gỗ ",
                            IsExist = true,
                            Status = 1,
                            Type = "Type1",
                            Url = "https://i.imgur.com/QHIc2NO.jpg",
                            UserId = 1L
                        },
                        new
                        {
                            PostId = 8L,
                            AvailableOptionsId = 1L,
                            Content = "Đó là một trang sách cũ mùi, Năm tháng ngủ vùi. Hoen ố trong tim ai đủ rồi ! Ưu tư phũ trời ",
                            IsExist = true,
                            Status = 1,
                            Type = "Type1",
                            Url = "https://i.imgur.com/BzONxug.jpg",
                            UserId = 1L
                        },
                        new
                        {
                            PostId = 9L,
                            AvailableOptionsId = 1L,
                            Content = "Có một ngày, chót đem lòng ta ôm lấy cuồng si.. ",
                            IsExist = true,
                            Status = 1,
                            Type = "Type1",
                            Url = "https://i.imgur.com/BzONxug.jpg",
                            UserId = 1L
                        },
                        new
                        {
                            PostId = 10L,
                            AvailableOptionsId = 1L,
                            Content = "Anh vẫn hay đọc lại quyển sách đôi ta... từng xem. Vì còn bao điều thú vị ta vẫn chưa thể nào nhận ra...em à ",
                            IsExist = true,
                            Status = 1,
                            Type = "Type1",
                            Url = "https://i.imgur.com/T5AmSfab.jpg",
                            UserId = 1L
                        },
                        new
                        {
                            PostId = 11L,
                            AvailableOptionsId = 1L,
                            Content = "Hello! It's me ",
                            IsExist = true,
                            Status = 1,
                            Type = "Type1",
                            Url = "https://i.imgur.com/q5RUBHl.jpg",
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("enet_be.Models.Reaction", b =>
                {
                    b.Property<long>("ReactionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Image");

                    b.Property<long>("PostId");

                    b.Property<long>("UserId");

                    b.HasKey("ReactionId");

                    b.HasIndex("PostId");

                    b.ToTable("Reactions");

                    b.HasData(
                        new
                        {
                            ReactionId = 1L,
                            Content = "Test1",
                            Date = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Image = "https://i.imgur.com/q5RUBHl.jpg",
                            PostId = 1L,
                            UserId = 1L
                        });
                });

            modelBuilder.Entity("enet_be.Models.Relationship", b =>
                {
                    b.Property<long>("RelationshipId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Block");

                    b.Property<bool?>("Follow");

                    b.Property<bool?>("Friend");

                    b.Property<long>("UserId");

                    b.Property<long>("UserSub");

                    b.HasKey("RelationshipId");

                    b.HasIndex("UserId");

                    b.ToTable("Relationships");

                    b.HasData(
                        new
                        {
                            RelationshipId = 1L,
                            Block = false,
                            Follow = true,
                            Friend = true,
                            UserId = 1L,
                            UserSub = 2L
                        },
                        new
                        {
                            RelationshipId = 2L,
                            Block = false,
                            Follow = true,
                            Friend = true,
                            UserId = 2L,
                            UserSub = 1L
                        },
                        new
                        {
                            RelationshipId = 3L,
                            Block = false,
                            Follow = true,
                            Friend = true,
                            UserId = 2L,
                            UserSub = 1L
                        });
                });

            modelBuilder.Entity("enet_be.Models.Report", b =>
                {
                    b.Property<long>("ReportId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ApproveDate");

                    b.Property<long>("BeReportedId");

                    b.Property<long>("ContentId");

                    b.Property<int?>("Count");

                    b.Property<long?>("Judge");

                    b.Property<long>("PostId");

                    b.Property<DateTime?>("ReportDate");

                    b.Property<long>("ReportTypeId");

                    b.Property<long>("ReporterId");

                    b.Property<int?>("Status");

                    b.Property<int?>("Type");

                    b.Property<long?>("UserId");

                    b.HasKey("ReportId");

                    b.HasIndex("ContentId");

                    b.HasIndex("PostId");

                    b.HasIndex("ReportTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            ReportId = 1L,
                            ApproveDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BeReportedId = 1L,
                            ContentId = 1L,
                            Count = 1,
                            Judge = 1L,
                            PostId = 1L,
                            ReportDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ReportTypeId = 1L,
                            ReporterId = 1L,
                            Status = 1,
                            Type = 1
                        });
                });

            modelBuilder.Entity("enet_be.Models.ReportType", b =>
                {
                    b.Property<long>("ReportTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ReportTypeName");

                    b.HasKey("ReportTypeId");

                    b.ToTable("ReportTypes");

                    b.HasData(
                        new
                        {
                            ReportTypeId = 1L,
                            ReportTypeName = "Type1"
                        },
                        new
                        {
                            ReportTypeId = 2L,
                            ReportTypeName = "Type2"
                        });
                });

            modelBuilder.Entity("enet_be.Models.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1L,
                            Type = "Admin"
                        },
                        new
                        {
                            RoleId = 2L,
                            Type = "User"
                        });
                });

            modelBuilder.Entity("enet_be.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime?>("Birthday");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("Image");

                    b.Property<bool>("IsExist");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("PhoneNumber");

                    b.Property<long>("RoleId");

                    b.Property<string>("UserName");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            Address = "Da Nang",
                            Birthday = new DateTime(2019, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "lisa@enclave.vn",
                            FirstName = "Lisa",
                            Image = "https://i.imgur.com/q5RUBHl.jpg",
                            IsExist = true,
                            LastName = "Nguyen",
                            PhoneNumber = "0764126148",
                            RoleId = 1L,
                            UserName = "Lisa"
                        },
                        new
                        {
                            UserId = 2L,
                            Address = "DakNong",
                            Birthday = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "anthorny@enclave.vn",
                            FirstName = "Anthorny",
                            Image = "https://i.imgur.com/q5RUBHl.jpg",
                            IsExist = true,
                            LastName = "Pham",
                            PhoneNumber = "0764126149",
                            RoleId = 1L,
                            UserName = "Anthorny"
                        },
                        new
                        {
                            UserId = 3L,
                            Address = "Da Nang",
                            Birthday = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dard@enclave.vn",
                            FirstName = "Dard",
                            Image = "https://i.imgur.com/q5RUBHl.jpg",
                            IsExist = true,
                            LastName = "Ngo",
                            PhoneNumber = "0764126150",
                            RoleId = 1L,
                            UserName = "Dard"
                        },
                        new
                        {
                            UserId = 4L,
                            Address = "Da Nang",
                            Birthday = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jeremy@enclave.vn",
                            FirstName = "Jeremy",
                            Image = "https://i.imgur.com/q5RUBHl.jpg",
                            IsExist = true,
                            LastName = "Tran",
                            PhoneNumber = "0764126151",
                            RoleId = 2L,
                            UserName = "Jeremy"
                        },
                        new
                        {
                            UserId = 5L,
                            Address = "Da Nang",
                            Birthday = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "sunny@enclave.vn",
                            FirstName = "Sunny",
                            Image = "https://i.imgur.com/q5RUBHl.jpg",
                            IsExist = true,
                            LastName = "Nguyen",
                            PhoneNumber = "0764126152",
                            RoleId = 2L,
                            UserName = "Sunny"
                        });
                });

            modelBuilder.Entity("enet_be.Models.Appeal", b =>
                {
                    b.HasOne("enet_be.Models.Report", "Report")
                        .WithMany("Appeals")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("enet_be.Models.User", "User")
                        .WithMany("Appeals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("enet_be.Models.Comment", b =>
                {
                    b.HasOne("enet_be.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("enet_be.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("enet_be.Models.Content", b =>
                {
                    b.HasOne("enet_be.Models.User", "User")
                        .WithMany("Contents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("enet_be.Models.Expect", b =>
                {
                    b.HasOne("enet_be.Models.User", "User1")
                        .WithMany("Expects1")
                        .HasForeignKey("UserIdMain")
                        .HasConstraintName("Expect1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("enet_be.Models.User", "User2")
                        .WithMany("Expects2")
                        .HasForeignKey("UserIdSub")
                        .HasConstraintName("Expect2")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("enet_be.Models.Only", b =>
                {
                    b.HasOne("enet_be.Models.User", "User1")
                        .WithMany("Only1")
                        .HasForeignKey("UserIdMain")
                        .HasConstraintName("Only1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("enet_be.Models.User", "User2")
                        .WithMany("Only2")
                        .HasForeignKey("UserIdSub")
                        .HasConstraintName("Only2")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("enet_be.Models.OptionPostUser", b =>
                {
                    b.HasOne("enet_be.Models.Post", "Post")
                        .WithMany("OptionPostUsers")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("enet_be.Models.User", "User")
                        .WithMany("OptionPostUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("enet_be.Models.Post", b =>
                {
                    b.HasOne("enet_be.Models.AvailableOptions", "AvailableOptions")
                        .WithMany()
                        .HasForeignKey("AvailableOptionsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("enet_be.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("enet_be.Models.Reaction", b =>
                {
                    b.HasOne("enet_be.Models.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("enet_be.Models.Relationship", b =>
                {
                    b.HasOne("enet_be.Models.User", "User")
                        .WithMany("Relationships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("enet_be.Models.Report", b =>
                {
                    b.HasOne("enet_be.Models.Content", "Content")
                        .WithMany("Reports")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("enet_be.Models.Post", "Post")
                        .WithMany("Reports")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("enet_be.Models.ReportType", "ReportType")
                        .WithMany("Reports")
                        .HasForeignKey("ReportTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("enet_be.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("enet_be.Models.User", b =>
                {
                    b.HasOne("enet_be.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
