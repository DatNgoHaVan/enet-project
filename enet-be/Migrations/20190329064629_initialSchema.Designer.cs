// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using enet_be.Models;

namespace enet_be.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20190329064629_initialSchema")]
    partial class initialSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("enet_be.Models.Appeal", b =>
                {
                    b.Property<long>("AppealId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("Date");

                    b.Property<long>("ReportId");

                    b.Property<int?>("Status");

                    b.Property<long>("UserId");

                    b.HasKey("AppealId");

                    b.HasIndex("ReportId");

                    b.HasIndex("UserId");

                    b.ToTable("Appeals");
                });

            modelBuilder.Entity("enet_be.Models.AvailableOptions", b =>
                {
                    b.Property<long>("AvailableOptionsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.HasKey("AvailableOptionsId");

                    b.ToTable("AvailableOptions");
                });

            modelBuilder.Entity("enet_be.Models.Comment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Image");

                    b.Property<long>("PostId");

                    b.Property<long>("UserId");

                    b.HasKey("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("enet_be.Models.Content", b =>
                {
                    b.Property<long>("ContentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentName");

                    b.Property<long>("UserId");

                    b.HasKey("ContentId");

                    b.HasIndex("UserId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("enet_be.Models.Expect", b =>
                {
                    b.Property<long>("UserIdMain");

                    b.Property<long>("UserIdSub");

                    b.HasKey("UserIdMain", "UserIdSub");

                    b.HasIndex("UserIdSub");

                    b.ToTable("Expects");
                });

            modelBuilder.Entity("enet_be.Models.Log", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("LogId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("enet_be.Models.Only", b =>
                {
                    b.Property<long>("UserIdMain");

                    b.Property<long>("UserIdSub");

                    b.HasKey("UserIdMain", "UserIdSub");

                    b.HasIndex("UserIdSub");

                    b.ToTable("Only");
                });

            modelBuilder.Entity("enet_be.Models.OptionPostUser", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<long>("PostId");

                    b.HasKey("UserId", "PostId");

                    b.HasAlternateKey("PostId", "UserId");

                    b.ToTable("OptionPostUsers");
                });

            modelBuilder.Entity("enet_be.Models.Post", b =>
                {
                    b.Property<long>("PostId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AvailableOptionsId");

                    b.Property<string>("Content");

                    b.Property<int?>("Status");

                    b.Property<string>("Type");

                    b.Property<string>("Url");

                    b.Property<long>("UserId");

                    b.HasKey("PostId");

                    b.HasIndex("AvailableOptionsId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("enet_be.Models.Reaction", b =>
                {
                    b.Property<long>("ReactionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Image");

                    b.Property<long>("PostId");

                    b.Property<long>("UserId");

                    b.HasKey("ReactionId");

                    b.HasIndex("PostId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("enet_be.Models.Relationship", b =>
                {
                    b.Property<long>("RelationshipId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Block");

                    b.Property<bool?>("Follow");

                    b.Property<bool?>("Friend");

                    b.Property<long>("UserId");

                    b.Property<long>("UserSub");

                    b.HasKey("RelationshipId");

                    b.HasIndex("UserId");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("enet_be.Models.Report", b =>
                {
                    b.Property<long>("ReportId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ApproveDate");

                    b.Property<long>("BeReportedId");

                    b.Property<long>("ContentId");

                    b.Property<int?>("Count");

                    b.Property<long?>("Judge");

                    b.Property<long?>("PostId");

                    b.Property<DateTime?>("ReportDate");

                    b.Property<long>("ReportTypeId");

                    b.Property<long>("ReporterId");

                    b.Property<int?>("Status");

                    b.Property<int?>("Type");

                    b.Property<long?>("UserId");

                    b.HasKey("ReportId");

                    b.HasIndex("ContentId");

                    b.HasIndex("PostId");

                    b.HasIndex("ReportTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("enet_be.Models.ReportType", b =>
                {
                    b.Property<long>("ReportTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ReportTypeName");

                    b.HasKey("ReportTypeId");

                    b.ToTable("ReportTypes");
                });

            modelBuilder.Entity("enet_be.Models.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("enet_be.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<DateTime?>("Birthday");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("PhoneNumber");

                    b.Property<long>("RoleId");

                    b.Property<string>("UserName");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("enet_be.Models.Appeal", b =>
                {
                    b.HasOne("enet_be.Models.Report", "Report")
                        .WithMany("Appeals")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("enet_be.Models.User", "User")
                        .WithMany("Appeals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("enet_be.Models.Comment", b =>
                {
                    b.HasOne("enet_be.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("enet_be.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("enet_be.Models.Content", b =>
                {
                    b.HasOne("enet_be.Models.User", "User")
                        .WithMany("Contents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("enet_be.Models.Expect", b =>
                {
                    b.HasOne("enet_be.Models.User", "User1")
                        .WithMany("Expects1")
                        .HasForeignKey("UserIdMain")
                        .HasConstraintName("Expect1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("enet_be.Models.User", "User2")
                        .WithMany("Expects2")
                        .HasForeignKey("UserIdSub")
                        .HasConstraintName("Expect2")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("enet_be.Models.Only", b =>
                {
                    b.HasOne("enet_be.Models.User", "User1")
                        .WithMany("Only1")
                        .HasForeignKey("UserIdMain")
                        .HasConstraintName("Only1")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("enet_be.Models.User", "User2")
                        .WithMany("Only2")
                        .HasForeignKey("UserIdSub")
                        .HasConstraintName("Only2")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("enet_be.Models.OptionPostUser", b =>
                {
                    b.HasOne("enet_be.Models.Post", "Post")
                        .WithMany("OptionPostUsers")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("enet_be.Models.User", "User")
                        .WithMany("OptionPostUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("enet_be.Models.Post", b =>
                {
                    b.HasOne("enet_be.Models.AvailableOptions", "AvailableOptions")
                        .WithMany()
                        .HasForeignKey("AvailableOptionsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("enet_be.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("enet_be.Models.Reaction", b =>
                {
                    b.HasOne("enet_be.Models.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("enet_be.Models.Relationship", b =>
                {
                    b.HasOne("enet_be.Models.User", "User")
                        .WithMany("Relationships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("enet_be.Models.Report", b =>
                {
                    b.HasOne("enet_be.Models.Content", "Content")
                        .WithMany("Reports")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("enet_be.Models.Post", "Post")
                        .WithMany("Reports")
                        .HasForeignKey("PostId");

                    b.HasOne("enet_be.Models.ReportType", "ReportType")
                        .WithMany("Reports")
                        .HasForeignKey("ReportTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("enet_be.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("enet_be.Models.User", b =>
                {
                    b.HasOne("enet_be.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
